Array

5th line

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        for(auto i=0;i<nums.size()-1;i++){
            if(nums[i]==nums[i+1]){
                return nums[i];
            }
        }
        return 1;
    }
};

6h line

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int zero=0,one=0,two=0;
        for(auto i=0;i<nums.size();i++){
            if(nums[i]==0){
                zero++;
            }else if(nums[i]==1){
                one++;
            }else{
                two++;
            }
        }
        for(auto i=0;i<nums.size();i++){
            if(zero>0){
                nums[i]=0;
                zero--;
            }else if(one>0){
                nums[i]=1;
                one--;
            }else{
                nums[i]=2;
            }
        }
    }
};

7th line
1st approach..
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int ans=0;
        int a[nums.size()],j=0;;
        for(auto i=0;i<nums.size();i++){
            int flag=0;
            for(int k=0;k<j;k++){
                if(a[k]==nums[i]){
                    flag=1;
                    break;
                }
            }
            if(flag==0){
                a[j]=nums[i];
                j++;
            }
        }
        for(int i=0;i<nums.size();i++){
            if(i<j){
                nums[i]=a[i];
            }else{
                nums[i]='_';
            }
        }
        return j;
    }
};
2nd Approach..
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int ans=0,j=1,prev=nums[0];
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=prev){
                nums[j]=nums[i];
                j++;
                prev=nums[i];
            }
        }
        return j;
    }
};
3rd approach:
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int prev=nums[0],i=1;
        for(int j: nums){
            if(j>prev){
                nums[i++]=j;
                prev=j;
            }
        }
        return i;
    }
};

8th line




9th line

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0){
                nums[j]=nums[i];
                j++;
            }
        }
        for(int i=j;i<nums.size();i++){
            nums[i]=0;
        }
    }
};


10th line

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int min=prices[0],max=0;
        for(int i=1;i<prices.size();i++){
            if(prices[i]>min){
                int temp=prices[i]-min;
                if(temp>max){
                    max=temp;
                }
            }
            else{
                min=prices[i];
            }
        }
        return max;
    }
};


11th line

class Solution{
    public:
    long long findMinDiff(vector<long long> a, long long n, long long m){
    //code
    int min=INT_MAX;
    sort(a.begin(),a.end());
    for(int i=0;i<n-m+1;i++){
        int temp=a[i+m-1]-a[i];
        if(temp<min){
            min=temp;
        }
        
    }
    return min;
    
    }   
};
